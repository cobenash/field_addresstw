<?php

/**
 * Implements hook_library().
 */
function field_addresstw_library() {
  $libraries['zipcodetw'] = array(
      'title' => 'jQuery-TWzipcode',
      'website' => 'https://github.com/essoduke/jQuery-TWzipcode',
      'version' => '2.0',
      'js' => array(
          drupal_get_path('module', 'field_addresstw') . '/library/jquery.twzipcode.min.js' => array(),
      ),
  );
  return $libraries;
}


/**
 * Implements hook_field_info().
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_info/7.x
 */
function field_addresstw_field_info() {
  return array(
    'field_addresstw_taiwan' => array(
      'label' => t('Taiwan Address Field'),
      'description' => t('Create an address field for taiwan and can choose the county, district, zipcode.'),
      'default_widget' => 'field_addresstw_selection',
      'default_formatter' => 'field_addresstw_full_text',
    ),
  );
}

/**
 * Validate this module's field data.
 *
 * If there are validation problems, add to the $errors array (passed by
 * reference). There is no return value.
 */
function field_addresstw_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['addresstw'])) {
      if (drupal_strlen($item['addresstw']) > 30) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'text_max_length',
          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => 30)),
        );
      }
    }
  }
}
  
  
/**
 * Implements hook_field_is_empty().
 */
function field_addresstw_field_is_empty($item, $field) {
  return empty($item['addresstw']) && empty($item['zipcode']) && empty($item['district']) && empty($item['county']);
}


/**
 * Implements hook_field_formatter_info().
 */
function field_addresstw_field_formatter_info() {
    return array(
      'field_addresstw_full_text' => array(
        'label' => t('Full Taiwan Address Text'),
        'field types' => array('field_addresstw_taiwan'),
      ),
      'field_addresstw_simple_text' => array(
        'label' => t('Simple Taiwan Address Text'),
        'field types' => array('field_addresstw_taiwan'),
      ),
      'field_addresstw_county_distrinct' => array(
        'label' => t('Conuty and Distrinct only'),
        'field types' => array('field_addresstw_taiwan'),
      ),
      'field_addresstw_zipcode' => array(
        'label' => t('Zipcode only'),
        'field types' => array('field_addresstw_taiwan'),
      ),
    );
  }

/**
 * Implements hook_field_widget_info().
 * 
 */
function field_addresstw_field_widget_info() {
    return array(
      'field_addresstw_selection' => array(
        'label' => t('Taiwan Address Select'),
        'field types' => array('field_addresstw_taiwan'),
      ),
    );
  }

/**
 * Implements hook_field_widget_form().
 * 
 */
function field_addresstw_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    $field_id = str_replace("_", "-", $field['field_name']) . '-' . $langcode . '-' . $delta;
    $addresstw = isset($items[$delta]['addresstw']) ? $items[$delta]['addresstw'] : '';
    $value=isset($items[$delta]) ? $items[$delta]: '';
    isset($element['#field_parents']) ? $bundle_id = implode('-', $element['#field_parents']) : $bundle_id = '';
    $divid = 'div-' . $field_id . '-' . $bundle_id . '-addresstw';
    $CountyId = 'edit-' . $field_id . '-' . $bundle_id . '-addresstw-county';
    $districtId = 'edit-' . $field_id . '-' . $bundle_id . '-addresstw-district';
    $zipcodeId = 'edit-' . $field_id . '-' . $bundle_id . '-addresstw-zipcode';

    switch ($instance['widget']['type']) {
        
        case 'field_addresstw_selection':
            $element['zipcode'] = $element + array(
                '#prefix' => '<label>' . $instance['label'] . '</label><div class="addresstw_selection_wrapper" id="'. $divid .'"><div class="address_twzipcode"></div>',
                '#type' => 'token',
                '#attributes' => array('class' => array('edit-zipcode'),'id'=>$zipcodeId),
                '#attached' => array(
                    'library' => array(
                        array('field_addresstw', 'zipcodetw')
                    ),
                    'js' => array(
                        drupal_get_path('module', 'field_addresstw') . '/js/twzipcode.js',
                        array(
                            'data' => array('field_addresstw' => array('#' . $divid => $value)),
                            'type' => 'setting',
                        ),
                    ),
                    'css' => array(drupal_get_path('module', 'field_addresstw') . '/css/twzipcode.css'),
                ),
            );
            $element['county'] = array(
                '#type' => 'token',
                '#attributes' => array('class' => array('edit-county'),'id'=>$CountyId),
            );
            $element['district'] = array(
                '#type' => 'token',
                '#attributes' => array('class' => array('edit-district'),'id'=>$districtId),
            );
            $element['addresstw'] = array(
                '#type' => 'textfield',
                '#default_value' => $addresstw,
                '#suffix' => '</div><div class="description">'. $instance['description'].'</div>',
                '#attributes' => array(
                    'class' => array('twzipcode-address'),
                    'placeholder'=>t('Your Address')
                ),
                '#size' => 30,
                '#maxlength' => 30,
              );
            break;
    }
    return $element;
  }

/**
 * Implements hook_field_formatter_view()
 *
 */
function field_addresstw_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'field_addresstw_full_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
            '#markup' => '<span class="addresstw-zipcode">'.$item['zipcode'].'</span><span class="addresstw-county">'.$item['county'].'</span><span class="addresstw-district">'.$item['district'].'</span><span class="addresstw-address">'.$item['addresstw'].'</span>',
        );
      }
      break;
    case 'field_addresstw_simple_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
            '#markup' => '<span class="addresstw-county">'.$item['county'].'</span><span class="addresstw-district">'.$item['district'].'</span><span class="addresstw-address">'.$item['addresstw'].'</span>',
        );
      }
      break;
    case 'field_addresstw_county_distrinct':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
            '#markup' => '<span class="addresstw-county">'.$item['county'].'</span><span class="addresstw-district">'.$item['district'].'</span>',
        );
      }
      break;
    case 'field_addresstw_zipcode':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
            '#markup' => '<span class="addresstw-zipcode">'.$item['zipcode'].'</span>',
        );
      }
      break;
  }
  return $element;
}